/* Given a string s, find the length of the longest substring without duplicate characters.  
  
 Example 1: 
  
 Input: s = "abcabcbb" 
 Output: 3 
 Explanation: The answer is "abc", with the length of 3. 
 Example 2: 
  
 Input: s = "bbbbb" 
 Output: 1 
 Explanation: The answer is "b", with the length of 1. 
 Example 3: 
  
 Input: s = "pwwkew" 
 Output: 3 
 Explanation: The answer is "wke", with the length of 3. 
 Notice that the answer must be a substring, "pwke" is a subsequence and not a substring. 
   
  
 Constraints: 
 0 <= s.length <= 5 * 104 
 s consists of English letters, digits, symbols and spaces. */ 
  
  
 Code: 
 class Solution: 
     def lengthOfLongestSubstring(self, s: str) -> int: 
         l1=[] 
         l2=[] 
         if s is not "": 
             for i in range(len(s)): 
                 if s[i] not in l1: 
                     l1.append(s[i]) 
                     #print("Appended:", l1) 
                 else: 
                     while s[i] in l1: 
                         l1.pop(0) 
                     l1.append(s[i]) 
                     #print("After pop:",l1) 
                 l2.append(len(l1)) 
                 #print("l2=",l2) 
         else: 
             return 0 
         return max(l2)