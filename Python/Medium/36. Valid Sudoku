/*  Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: 
  
 Each row must contain the digits 1-9 without repetition. 
 Each column must contain the digits 1-9 without repetition. 
 Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition. 
 Note: 
  
 A Sudoku board (partially filled) could be valid but is not necessarily solvable. 
 Only the filled cells need to be validated according to the mentioned rules. 
   
  
 Example 1: 
 Input: board =  
 [["5","3",".",".","7",".",".",".","."] 
 ,["6",".",".","1","9","5",".",".","."] 
 ,[".","9","8",".",".",".",".","6","."] 
 ,["8",".",".",".","6",".",".",".","3"] 
 ,["4",".",".","8",".","3",".",".","1"] 
 ,["7",".",".",".","2",".",".",".","6"] 
 ,[".","6",".",".",".",".","2","8","."] 
 ,[".",".",".","4","1","9",".",".","5"] 
 ,[".",".",".",".","8",".",".","7","9"]] 
 Output: true 
  
 Example 2: 
 Input: board =  
 [["8","3",".",".","7",".",".",".","."] 
 ,["6",".",".","1","9","5",".",".","."] 
 ,[".","9","8",".",".",".",".","6","."] 
 ,["8",".",".",".","6",".",".",".","3"] 
 ,["4",".",".","8",".","3",".",".","1"] 
 ,["7",".",".",".","2",".",".",".","6"] 
 ,[".","6",".",".",".",".","2","8","."] 
 ,[".",".",".","4","1","9",".",".","5"] 
 ,[".",".",".",".","8",".",".","7","9"]] 
 Output: false 
 Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid. */ 
  
  
 Code: 
 class Solution: 
     def isValidSudoku(self, board: List[List[str]]) -> bool: 
         for i in range(0,9):  #row 
             l2=[] 
             l3=[] 
             for j in range(0,9):  #col 
                 if board[i][j]!='.': 
                     if board[i][j] in l2: 
                         return False 
                     else: 
                         l2.append(board[i][j]) 
              
                 if board[j][i]!='.': 
                     if board[j][i] in l3: 
                         print("False") 
                         return False 
                     else: 
                         l3.append(board[j][i]) 
             #print(l3) 
  
             for i in range(0,9): 
                 l1=[[] for _ in range(9)] 
                 for i in range(9): 
                     for j in range(9): 
                         l1_ind=(i//3)*3+(j//3) 
                         if board[i][j]!='.': 
                             if board[i][j] in l1[l1_ind]: 
                                 return False 
                             else: 
                                 l1[l1_ind].append(board[i][j]) 
         return True