/*  Given a string s, return the longest palindromic substring in s. 
  
 Example 1: 
  
 Input: s = "babad" 
 Output: "bab" 
 Explanation: "aba" is also a valid answer. 
 Example 2: 
  
 Input: s = "cbbd" 
 Output: "bb" 
   
  
 Constraints: 
  
 1 <= s.length <= 1000 
 s consist of only digits and English letters.  */ 
  
  
 Code: 
 class Solution: 
     def longestPalindrome(self, s: str) -> str: 
         longest_str=s[0] 
         cnt=0 
         if len(s)==1: 
             return s 
         else: 
             for i in range(0,len(s)-1): 
                 for j in range(i+1,len(s)): 
                     #print("str1=",s[i:j+1]," str2=",s[i:j+1][::-1]) 
                     if j-i+1 > cnt and s[i:j+1]==s[i:j+1][::-1]: 
                         #print("j=",j," i=",i," +1=",(j-i+1)) 
                         cnt=j-i+1 
                         longest_str=s[i:j+1] 
                         #print(longest_str) 
         return longest_str