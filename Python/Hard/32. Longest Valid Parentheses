/*  Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring. 
  
 Example 1: 
 Input: s = "(()" 
 Output: 2 
 Explanation: The longest valid parentheses substring is "()". 
  
 Example 2: 
 Input: s = ")()())" 
 Output: 4 
 Explanation: The longest valid parentheses substring is "()()". 
  
 Example 3: 
 Input: s = "" 
 Output: 0 
   
  
 Constraints: 
 0 <= s.length <= 3 * 104 
 s[i] is '(', or ')'.  */ 
  
  
 Code: 
 class Solution: 
     def longestValidParentheses(self, s: str) -> int: 
         max_len=0 
         l1=[-1] 
         if len(s)==0: 
             return 0 
         for i in range(len(s)): 
             if s[i]=='(': 
                 l1.append(i) 
                 #print("if -> ", i) 
             else: 
                 l1.pop() 
                 #print("else -> ", l1) 
                 if not l1: 
                     l1.append(i) 
                 else: 
                     max_len=max(max_len, i-l1[-1]) 
         return max_len